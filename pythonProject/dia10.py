'''

Clases y objetos
La base de la POO son los objetos.
Pod√©is imaginaros los objetos como un nuevo tipo de dato cuya definici√≥n viene dada en una estructura llamada clase.
Suelo hacer una met√°fora y comparar las clases con moldes de galletas y los objetos con las galletas en s√≠ mismas.
Si bien todas las galletas que se hacen con el mismo molde tienen la misma forma, cada una adquiere
atributos individuales despu√©s del horneado. Cosas como el color, la textura, el sabor... pueden
llegar a ser muy distintas.
En otras palabras, las galletas comparten un proceso de fabricaci√≥n y unos atributos, pero son independientes
entre ellas y del propio molde y eso hace que cada una sea √∫nica.
Extrapolando el ejemplo, una clase es s√≥lo un gui√≥n sobre como deben ser los objetos que se crear√°n con ella.

La funci√≥n type()
Ya he comentado varias veces que en Python todo son clases y objetos, eso se puede comprobar f√°cilmente
pasando a la funci√≥n type() cualquier variable o literal:
numero = 10
type(numero)
int
En el c√≥digo anterior numero es una variable entera, pero si vamos m√°s all√°, en realidad es una instancia del
tipo int, una clase muy b√°sica de dato para almacenar n√∫meros enteros.
Como curiosidad, incluso las funciones en Python son instancias del tipo function:
def hola():
    pass

type(hola)
function
Con eso en mente veamos como crear nuestras propias clases.

Definici√≥n de clase

La sintaxis es muy sencilla:
'''


class Galleta:  # se acostumbra usar may√∫sculas
    pass


'''
Esta es una definici√≥n muy simple de lo que es una galleta, ya que con el pass la dejo vac√≠a. 
Luego a√±adiremos m√°s informaci√≥n, por ahora veamos como crear galletas con este molde.

Instancias de clase

Para entender bien los objetos debemos tener claras dos cuestiones fundamentales:
¬øCu√°ndo y d√≥nde existen los objetos?
Puede parecer trivial, pero es importante tener claro que los objetos "existen" s√≥lo durante 
la ejecuci√≥n del programa y se almacenan en la memoria del sistema operativo.
Es decir, mientras las clases est√°n ah√≠ en el c√≥digo haciendo su papel de instrucciones, los objetos 
no existen hasta que el programa se ejecuta y se crean en la memoria.

Este proceso de "crear" los objetos en la memoria se denomina instanciaci√≥n y para realizarlo es tan 
f√°cil como llamar a la clase como si fuera una funci√≥n:

'''
una_galleta = Galleta()
otra_galleta = Galleta()

'''
Demostrar que las galletas existen como "entes independientes" dentro de la memoria, es tan sencillo 
como imprimirlas por pantalla:
'''

print(una_galleta)
print(otra_galleta)
# <__main__.Galleta object at 0x000001433B4C2048>
# <__main__.Galleta object at 0x000001433B439FD0>
'''
Cada instancia tiene su propia referencia, demostrando que est√°n en lugares distintos de la memoria. 
En cambio la clase no tiene una referencia porque es s√≥lo un gui√≥n de instrucciones:

'''
print(Galleta)
# <class '__main__.Galleta'>

'''Es posible consultar la clase de un objeto con la funci√≥n type(), pero tambi√©n se puede consultar a 
trav√©s de su atributo especial class:'''

print(Galleta)
print(type(una_galleta))
print(una_galleta.__class__)
# <class '__main__.Galleta'>
# <class '__main__.Galleta'>
# <class '__main__.Galleta'>

'''
A su vez las clases tienen un atributo especial name que nos devuelve su nombre en forma de cadena sin adornos:
'''
print(Galleta.__name__)
print(type(una_galleta).__name__)
print(una_galleta.__class__.__name__)
# Galleta
# Galleta
# Galleta


'''
Atributos y m√©todos
Si hay algo que ilustre el potencial de la POO esa es la capacidad de definir variables y funciones 
dentro de las clases, aunque aqu√≠ se conocen como atributos y m√©todos respectivamente.

Atributos

A efectos pr√°cticos los atributos no son muy distintos de las variables, la diferencia fundamental 
es que s√≥lo existen dentro del objeto.

Atributos din√°micos
Dado que Python es muy flexible los atributos pueden manejarse de distintas formas, por ejemplo 
se pueden crear din√°micamente (al vuelo) en los objetos.
'''


class Galleta:
    pass


galleta = Galleta()
galleta.sabor = "salado"
galleta.color = "marr√≥n"

print(f"El sabor de esta galleta es {galleta.sabor} "
      f"y el color {galleta.color}")

'''El sabor de esta galleta es Salado y el color Marr√≥n
Atributos de clase
Aunque la flexibilidad de los atributos din√°micos puede llegar a ser muy √∫til, tener que 
definir los atributos de esa forma es tedioso. Es m√°s pr√°ctico definir unos atributos b√°sicos 
en la clase. De esa manera todas las galletas podr√≠an tener unos atributos por defecto:
'''


class Galleta:
    chocolate = False


galleta = Galleta()

if galleta.chocolate:
    print("La galleta tiene chocolate")
else:
    print("La galleta no tiene chocolate")
# La galleta no tiene chocolate
# Luego podemos cambiar su valor en cualquier momento:
galleta.chocolate = True

if galleta.chocolate:
    print("La galleta tiene chocolate")
else:
    print("La galleta no tiene chocolate")

'''
La galleta tiene chocolate
Por lo menos de esta forma nos aseguraremos de que el atributo chocolate existe en todas 
las galletas desde el principio. Adem√°s es posible consultar el valor por defecto que deben 
tener las galletas haciendo referencia al atributo en la definici√≥n de la clase:
'''
print(Galleta.chocolate)
# False

'''
Lo curioso es que si cambiamos ese atributo de clase (que no de objeto) a True, las siguientes 
galletas se crear√°n con chocolate, es decir, habremos modificado las instrucciones de creaci√≥n de los objetos:
'''


class Galleta:
    chocolate = False


Galleta.chocolate = True

galleta = Galleta()

if galleta.chocolate:
    print("La galleta tiene chocolate")
else:
    print("La galleta no tiene chocolate")

'''La galleta tiene chocolate
Ya les gustar√≠a a otros lenguajes ser tan flexibles. üòÅüòÅüòÅ

M√©todos

Si por un lado tenemos las "variables" de las clases, por otro tenemos sus "funciones", que evidentemente 
nos permiten definir funcionalidades para llamarlas desde las instancias.
Definir un m√©todo es bastante simple, s√≥lo tenemos que a√±adirlo en la clase y luego llamarlo desde 
el objeto con los par√©ntesis, como si de una funci√≥n se tratase:
'''


class Galleta:
    chocolate = False

    def saludar(self):
        print("Hola, soy una galleta muy sabrosa")


galleta = Galleta()
# Galleta.saludar()

'''---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-27-74df06911b9b> in <module>()
    6 
    7 galleta = Galleta()
----> 8 galleta.saludar()

TypeError: saludar() takes 0 positional arguments but 1 was given
Sin embargo, al intentar ejecutar el c√≥digo anterior desde una galleta ver√©is que no funciona. 
Nos indica que el m√©todo saludar() requiere 0 argumentos pero se est√° pasando uno.
¬øC√≥mo puede ser? Si en ning√∫n momento hemos enviado ninguna informaci√≥n a al galleta...
Lo que tenemos aqu√≠, estimados alumnos, es la diferencia fundamental entre m√©todos de clase y m√©todos de instancia.
Probad a ejecutar el m√©todo llamando a la clase en lugar del objeto:
'''


class Galleta:
    chocolate = False

    def saludar(self):
        print("Hola, soy una galleta muy sabrosa")


# Galleta.saludar()
# Hola, soy una galleta muy sabrosa

''''¬°Ahora s√≠ ha funcionado! ¬øC√≥mo es posible? Y m√°s importante, ¬øpor qu√© al llamarlo desde el 
objeto dice que estamos enviando un argumento?
Primer argumento self
Los objetos tienen una caracter√≠stica muy importante: son conscientes de que existen. Y no, no es broma.
Cuando se ejecuta un m√©todo desde un objeto (que no desde una clase), se env√≠a un primer argumento 
impl√≠cito que hace referencia al propio objeto. Si lo definimos en nuestro m√©todo podremos capturarlo y ver qu√© es:
'''


class Galleta:
    chocolate = False

    def saludar(soy_el_propio_objeto):
        print("Hola, soy una galleta muy sabrosa")
        print(soy_el_propio_objeto)


galleta = Galleta()
galleta.saludar()
# Hola, soy una galleta muy sabrosa
# <__main__.Galleta object at 0x0000028E65476748>


'''¬øCurioso que haya funcionado verdad? Adem√°s ¬øno os suena de algo ese resultado que muestra el par√°metro 
que hemos definido? Se trata de la propia representaci√≥n del objeto.'''


class Galleta:
    chocolate = False

    def saludar(soy_el_propio_objeto):
        print("Hola, soy una galleta muy sabrosa")
        print(soy_el_propio_objeto)


galleta = Galleta()
galleta.saludar()
print(galleta)
# Hola, soy una galleta muy sabrosa
# <__main__.Galleta object at 0x0000028E654769E8>
# <__main__.Galleta object at 0x0000028E654769E8>


'''Pues s√≠, podemos acceder al propio objeto desde el interior de sus m√©todos. Lo √∫nico que como 
este argumento hace referencia al objeto en s√≠ mismo por convenci√≥n se le llama self.
Poder acceder al propio objeto desde un m√©todo es muy √∫til, ya que nos permite acceder a sus atributos. 
Fijaros, el siguiente c√≥digo no funcionar√≠a como esperamos:
'''


class Galleta:
    chocolate = False

    def chocolatear(self):
        chocolate = True


galleta = Galleta()
galleta.chocolatear()
print(galleta.chocolate)


# False
# En cambio, si hacemos ver que self es el propio objeto...
class Galleta:
    chocolate = False

    def chocolatear(self):
        self.chocolate = True


galleta = Galleta()
galleta.chocolatear()
print(galleta.chocolate)
# True

'''
¬øNo es interesante? Da la sensaci√≥n como os dec√≠a antes de que las instancias tienen que saber quienes 
son porque sino no pueden acceder sus atributos internos y por eso tienen que enviarse asimismas a los m√©todos.
Sea como sea con este ejemplo podemos entender que por defecto el valor de un atributo se busca en la clase, 
pero para modificarlo en la instancia es necesario hacer referencia al objeto.
M√©todos especiales
Ahora que sabemos crear m√©todos y hemos aprendido para qu√© sirve el argumento self, es momento de introducir 
algunos m√©todos especiales de las clases.
Se llaman especiales porque la mayor√≠a ya existen de forma oculta y sirven para tareas espec√≠ficas.

Constructor
El constructor es un m√©todo que se llama autom√°ticamente al crear un objeto, se define con el nombre init:

'''


class Galleta:

    def __init__(self):
        print(" Soy una galleta acabada de hornear!")


galleta = Galleta()
# Soy una galleta acabada de hornear!
nueva_galleta = Galleta()
# Soy una galleta acabada de hornear!
'''La finalidad del constructor es, como su nombre indica, construir los objetos. Por esa raz√≥n permite 
sobreescribir el m√©todo que crea los objetos, permiti√©ndonos enviar datos desde el principio para construirlo:'''


class Galleta:
    chocolate = False

    def __init__(self, sabor, color):
        self.sabor = sabor
        self.color = color
        print(f"Se acaba de crear una galleta {self.color} y {self.sabor}.")


galleta_1 = Galleta("marr√≥n", "amarga")
galleta_2 = Galleta("blanca", "dulce")

# Se acaba de crear una galleta marr√≥n y amarga.
# Se acaba de crear una galleta blanca y dulce.

'''Como los m√©todos se comportan como funciones tienen sus mismas caracter√≠sticas, permiti√©ndonos definir 
valores nulos, valores por posici√≥n y nombre, argumentos indeterminadas, etc.

Destructor
Si existe un constructor tambi√©n debe existir un destructor que se llame al eliminar el objeto para 
que encargue de las tareas de limpieza como vaciar la memoria. Ese es el papel del m√©todo especial del. 
Es muy raro sobreescribir este m√©todo porque se maneja autom√°ticamente, pero es interesante saber que existe.
Todos los objetos se borran autom√°ticamente de la memoria al finalizar el programa, aunque tambi√©n podemos 
eliminarlos autom√°ticamente pas√°ndolos a la funci√≥n del():'''


class Galleta:

    def __del__(self):
        print("La galleta se est√° borrando de la memoria")


galleta = Galleta()

del (galleta)
# La galleta se est√° borrando de la memoria

'''En este punto vale comentar algo respecto a los m√©todos especiales como √©ste, y es que pese a que tienen 
accesores en forma de funci√≥n para facilitar su llamada, es totalmente posible ejecutarlos directamente 
como si fueran m√©todos normales:'''


class Galleta:

    def __del__(self):
        print("La galleta se est√° borrando de la memoria")


galleta = Galleta()

galleta.__del__()
# La galleta se est√° borrando de la memoria

'''Si ten√©is memoria seguro que ahora mismo os est√°is acordando de funciones como str() y len(), y es que 
en efecto, esas tambi√©n son accesores de los m√©todos especiales str y len que tienen los objetos.
String
El m√©todo str es el que devuelve la representaci√≥n de un objeto en forma de cadena. Un momento en que se llama 
autom√°ticamente es cuando imprimirmos una variable por pantalla.
Por defecto los objetos imprimen su clase y una direcci√≥n de memoria, pero eso puede cambiarse 
sobreescribiendo el comportamiento:'''


class Galleta:

    def __init__(self, sabor, color):
        self.sabor = sabor
        self.color = color

    def __str__(self):
        return f"Soy una galleta {self.color} y {self.sabor}."


galleta = Galleta("dulce", "blanca")

print(galleta)
print(str(galleta))
print(galleta.__str__())
# Soy una galleta blanca y dulce.
# Soy una galleta blanca y dulce.
# Soy una galleta blanca y dulce.

'''Hay que tener en cuenta que este m√©todo debe devolver la cadena en lugar de mostrar algo por pantalla, 
ese es el funcionamiento que se espera de √©l.

Length
Finalmente otro m√©todo especial interesante es el que devuelve la longitud. Normalmente est√° ligado 
a colecciones, pero nada impide definirlo en una clase. Y s√≠, digo definirlo y no redefinirlo porque 
por defecto no existe en los objetos aunque sea el que se ejecuta al pasarlos a la funci√≥n len().'''


class Cancion:

    def __init__(self, autor, titulo, duracion):  # en segundos
        self.duracion = duracion

    def __len__(self):
        return self.duracion


cancion = Cancion("Queen", "Don't Stop Me Now", 210)

print(len(cancion))
print(cancion.__len__())
# 210
# 210


'''Objetos dentro de objetos
Hasta ahora no lo hemos comentado, pero al ser las clases un nuevo tipo de dato resulta m√°s que obvio 
que se pueden poner en colecciones e incluso utilizarlos dentro de otras clases. 
Os voy a dejar un peque√±o c√≥digo de ejemplo sobre un cat√°logo de pel√≠culas para que lo estudi√©is detenidamente:'''


class Pelicula:

    # Constructor de clase
    def __init__(self, titulo, duracion, lanzamiento):
        self.titulo = titulo
        self.duracion = duracion
        self.lanzamiento = lanzamiento
        print('Se ha creado la pel√≠cula:', self.titulo)

    def __str__(self):
        return f'{self.titulo} ({self.lanzamiento})'


class Catalogo:
    peliculas = []  # Esta lista contendr√° objetos de la clase Pelicula

    def __init__(self, peliculas=[]):
        self.peliculas = peliculas

    def agregar(self, p):  # p ser√° un objeto Pelicula
        self.peliculas.append(p)

    def mostrar(self):
        for p in self.peliculas:
            print(p)  # Print toma por defecto str(p)


p = Pelicula("El Padrino", 175, 1972)
c = Catalogo([p])  # A√±ado una lista con una pel√≠cula desde el principio
c.mostrar()
c.agregar(Pelicula("El Padrino: Parte 2", 202, 1974))  # A√±adimos otra
c.mostrar()
# Se ha creado la pel√≠cula: El Padrino
# "El Padrino (1972)
# "Se ha creado la pel√≠cula: El Padrino: Parte 2
# El Padrino (1972)
# El Padrino: Parte 2 (1974)


'''Encapsulaci√≥n
Finalmente para acabar la introducci√≥n vale la pena comentar esta "t√©cnica". No es santo de mi devoci√≥n 
porque no le veo mucho sentido, pero si ven√≠s de otros lenguajes quiz√° os interesa conocerla.
La encapsulaci√≥n consiste en denegar el acceso a los atributos y m√©todos internos de la clase desde 
el exterior. En Python no existe, pero se puede simular precediendo atributos y m√©todos 
con dos barras bajas __ como indicando que son "especiales".
En el caso de los atributos quedar√≠an as√≠:'''


class Ejemplo:
    __atributo_privado = "Soy un atributo inalcanzable desde fuera."


e = Ejemplo()
# print(e.__atributo_privado)
'''
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-3-eed1a613919b> in <module>()
----> 1 print(e.__atributo_privado)

AttributeError: 'Ejemplo' object has no attribute '__atributo_privado'
Y en los m√©todos...'''


class Ejemplo:
    def __metodo_privado(self):
        print("Soy un m√©todo inalcanzable desde fuera.")


e = Ejemplo()
# e.__metodo_privado()
'''

---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-5-81c514698440> in <module>()
----> 1 e.__metodo_privado()

AttributeError: 'Ejemplo' object has no attribute '__metodo_privado'
¬øQu√© sentido tiene esto en Python? Ninguno, porque se pierde toda la gracia de lo que en esencia es el 
lenguaje: flexibilidad y polimorfismo sin control (hablaremos de esto m√°s adelante).
Sea como sea para acceder a esos datos se deber√≠an crear m√©todos p√∫blicos que hagan de interfaz. 
En otros lenguajes les llamar√≠amos getters y setters y es lo que da lugar a las propiedades, que no 
son m√°s que atributos protegidos con interfaces de acceso:'''


class Ejemplo:
    __atributo_privado = "Soy un atributo inalcanzable desde fuera."

    def __metodo_privado(self):
        print("Soy un m√©todo inalcanzable desde fuera.")

    def atributo_publico(self):
        return self.__atributo_privado

    def metodo_publico(self):
        return self.__metodo_privado()


e = Ejemplo()
print(e.atributo_publico())
e.metodo_publico()
# Soy un atributo inalcanzable desde fuera.
# Soy un m√©todo inalcanzable desde fuera.


'''Ejercicios ¬´ Programaci√≥n Orientada a Objetos
Teor√≠a previa
En este ejercicio vas a trabajar el concepto de puntos, coordenadas y vectores sobre el plano cartesiano y 
c√≥mo la programaci√≥n Orientada a Objetos puede ser una excelente aliada para trabajar con ellos. No est√° pensado 
para que hagas ning√∫n tipo de c√°lculo sino para que practiques la automatizaci√≥n de tareas.
Nota
Creo que es un ejemplo muy interesante, punto de partida en la programaci√≥n de gr√°ficos, pero si consideras que 
esto no lo tuyo puedes simplemente pasar de largo. Ahora bien, debes ser consciente de que te vas a perder uno de 
los ejercicios m√°s interesantes del curso.
Voy a explicar brevemente los conceptos b√°sicos por si alguien necesita un repaso.
El plano cartesiano
Representa un espacio bidimensional (en 2 dimensiones), formado por dos rectas perpendiculares, una horizontal 
y otra vertical que se cortan en un punto. La recta horizontal se denomina eje de las abscisas o eje X, 
mientras que la vertical recibe el nombre de eje de las ordenadas o simplemente eje Y. En cuanto al punto 
donde se cortan, se conoce como el punto de origen O.

Es importante remarcar que el plano se divide en 4 cuadrantes:

Puntos y coordenadas
El objetivo de todo esto es describir la posici√≥n de puntos sobre el plano en forma de coordenadas, 
que se forman asociando el valor del eje de las X (horizontal) con el valor del eje Y (vertical).
La representaci√≥n de un punto es sencilla: P(X,Y) d√≥nde X y la Y son la distancia horizontal (izquierda o derecha) 
y vertical (arriba o abajo) respectivamente, utilizando como referencia el punto de origen (0,0), 
justo en el centro del plano.

Vectores en el plano
Finalmente, un vector en el plano hace referencia a un segmento orientado, generado a partir de dos puntos distintos. 
A efectos pr√°cticos no deja de ser una l√≠nea formada desde un punto inicial en direcci√≥n a otro punto 
final, por lo que se entiende que un vector tiene longitud y direcci√≥n/sentido.

En esta figura, podemos observar dos puntos A y B que podr√≠amos definir de la siguiente forma:
‚Ä¢	A(x1, y1) => A(2, 3)
‚Ä¢	B(x2, y2) => B(5, 5)
Y el vector se representar√≠a como la diferencia entre las coordendas del segundo punto respecto al primero
 (el segundo menos el primero):
‚Ä¢	AB = (x2-x1, y2-y1) => (5-2, 5-3) => (3,2) 
Lo que en definitiva no deja de ser: 3 a la derecha y 2 arriba.
Y con esto finalizamos este mini repaso.
Ejercicio
‚Ä¢	Crea una clase llamada Punto con sus dos coordenadas X e Y.
‚Ä¢	A√±ade un m√©todo constructor para crear puntos f√°cilmente. Si no se reciben una coordenada, su valor ser√° cero.
‚Ä¢	Sobreescribe el m√©todo string, para que al imprimir por pantalla un punto aparezca en formato (X,Y)
‚Ä¢	A√±ade un m√©todo llamado cuadrante que indique a qu√© cuadrante pertenece el punto, teniendo en cuenta 
    que si X == 0 e Y != 0 se sit√∫a sobre el eje Y, si X != 0 e Y == 0 se sit√∫a sobre el eje X y si X == 0 e 
    Y == 0 est√° sobre el origen.
‚Ä¢	A√±ade un m√©todo llamado vector, que tome otro punto y calcule el vector resultante entre los dos puntos.
‚Ä¢	(Optativo) A√±ade un m√©todo llamado distancia, que tome otro punto y calcule la distancia entre los dos puntos 
y la muestre por pantalla. La f√≥rmula es la siguiente:

Nota
La funci√≥n ra√≠z cuadrada en Python sqrt() se debe importar del m√≥dulo math y utilizarla de la siguiente forma: 
import math
math.sqrt(9)
‚Ä¢	Crea una clase llamada Rectangulo con dos puntos (inicial y final) que formar√°n la diagonal del rect√°ngulo.
‚Ä¢	A√±ade un m√©todo constructor para crear ambos puntos f√°cilmente, si no se env√≠an se crear√°n dos 
    puntos en el origen por defecto.
‚Ä¢	A√±ade al rect√°ngulo un m√©todo llamado base que muestre la base.
‚Ä¢	A√±ade al rect√°ngulo un m√©todo llamado altura que muestre la altura.
‚Ä¢	A√±ade al rect√°ngulo un m√©todo llamado area que muestre el area.
Sugerencia
Puedes identificar f√°cilmente estos valores si intentas dibujar el cuadrado a partir de su diagonal. 
Si andas perdido, prueba de dibujarlo en un papel, ¬°seguro que lo ver√°s mucho m√°s claro! Adem√°s recuerda 
que puedes utilizar la funci√≥n abs() para saber el valor absolute de un n√∫mero.
Experimentaci√≥n
‚Ä¢	Crea los puntos A(2, 3), B(5,5), C(-3, -1) y D(0,0) e imprimelos por pantalla.
‚Ä¢	Consulta a que cuadrante pertenecen el punto A, C y D.
‚Ä¢	Consulta los vectores AB y BA.
‚Ä¢	(Optativo) Consulta la distancia entre los puntos 'A y B' y 'B y A'. 
‚Ä¢	(Optativo) Determina cual de los 3 puntos A, B o C, se encuentra m√°s lejos del origen, punto (0,0). 
‚Ä¢	Crea un rect√°ngulo utilizando los puntos A y B.
‚Ä¢	Consulta la base, altura y √°rea del rect√°ngulo.


Herencia
La herencia es la capacidad que tiene una clase de heredar los atributos y m√©todos de otra, algo que nos 
permite reutilizar c√≥digo y hacer programar mucho m√°s √≥ptimos.
Para ver su utilidad, en esta lecci√≥n vamos a desarrollar un ejemplo. Partiremos de una clase sin herencia 
con muchos atributos y la iremos descomponiendo en otras clases m√°s simples que nos permitan trabajar 
mejor con sus datos.
Ejemplo sin herencia
Hace muchos a√±os me vi en la necesidad de dise√±ar una estructura para una tienda 
que vend√≠a tres tipos de 
productos: adornos, alimentos y libros.
Todos los productos de la tienda ten√≠an una serie de atributos comunes, como la referencia, 
el nombre, el pvp... 
pero algunos eran espec√≠ficos de cada tipo.
Si partimos de una clase que contenga todos los atributos, quedar√≠a m√°s o menos as√≠:'''


class Producto:
    def __init__(self, referencia, tipo, nombre,
                 pvp, descripcion, productor=None,
                 distribuidor=None, isbn=None, autor=None):
        self.referencia = referencia
        self.tipo = tipo
        self.nombre = nombre
        self.pvp = pvp
        self.descripcion = descripcion
        self.productor = productor
        self.distribuidor = distribuidor
        self.isbn = isbn
        self.autor = autor


adorno = Producto('000A', 'ADORNO', 'Vaso Adornado', 15,
                  'Vaso de porcelana con dibujos')

print(adorno)
print(adorno.tipo)
# <__main__.Producto object at 0x0000026233AD72E8>
# ADORNO

'''Obviamente esto es un desprop√≥sito, as√≠ que veamos como aproecharnos de la herencia para 
mejorar el planteamento. 
Superclases
As√≠ pues la idea de la herencia es identificar una clase base (la superclase) con los 
atriutos comunes y luego 
crear las dem√°s clases heredando de ella (las subclases) extendiendo sus campos espec√≠ficos. 
En nuestro caso esa clase ser√≠a el Producto en s√≠ mismo:'''


class Producto:
    def __init__(self, referencia, nombre, pvp, descripcion):
        self.referencia = referencia
        self.nombre = nombre
        self.pvp = pvp
        self.descripcion = descripcion

    def __str__(self):
        return f"REFERENCIA\t {self.referencia}\n" \
               f"NOMBRE\t\t {self.nombre}\n" \
               f"PVP\t\t {self.pvp}\n" \
               f"DESCRIPCI√ìN\t {self.descripcion}\n"


'''Subclases
Para heredar los atributos y m√©todos de una clase en otra s√≥lo tenemos que pasarla entre par√©ntesis 
durante la definici√≥n:'''


class Adorno(Producto):
    pass


adorno = Adorno(2034, "Vaso adornado", 15, "Vaso de porcelana")
print(adorno)
'''REFERENCIA      2034
NOMBRE          Vaso adornado
PVP             15
DESCRIPCI√ìN     Vaso de porcelana
Como se puede apreciar es posible utilizar el comportamiento de una superclase sin definir nada en la subclase.
Respecto a las dem√°s subclases como se a√±aden algunos atributos, podr√≠amos definirlas de esta forma:'''


class Alimento(Producto):
    productor = ""
    distribuidor = ""

    def __str__(self):
        return f"REFERENCIA\t {self.referencia}\n" \
               f"NOMBRE\t\t {self.nombre}\n" \
               f"PVP\t\t {self.pvp}\n" \
               f"DESCRIPCI√ìN\t {self.descripcion}\n" \
               f"PRODUCTOR\t\t {self.productor}\n" \
               f"DISTRIBUIDOR\t\t {self.distribuidor}\n"


class Libro(Producto):
    isbn = ""
    autor = ""

    def __str__(self):
        return f"REFERENCIA\t {self.referencia}\n" \
               f"NOMBRE\t\t {self.nombre}\n" \
               f"PVP\t\t {self.pvp}\n" \
               f"DESCRIPCI√ìN\t {self.descripcion}\n" \
               f"ISBN\t\t {self.isbn}\n" \
               f"AUTOR\t\t {self.autor}\n"


'''Ahora para utilizarlas simplemente tendr√≠amos que establecer los atributos despu√©s 
de crear los objetos:'''

alimento = Alimento(2035, "Botella de Aceite de Oliva", 5, "250 ML")
alimento.productor = "La Aceitera"
alimento.distribuidor = "Distribuciones SA"
print(alimento)

libro = Libro(2036, "Cocina Mediterr√°nea", 9, "Recetas sanas y buenas")
libro.isbn = "0-123456-78-9"
libro.autor = "Do√±a Juana"
print(libro)
'''REFERENCIA      2035
NOMBRE          Botella de Aceite de Oliva
PVP             5
DESCRIPCI√ìN     250 ML
PRODUCTOR       La Aceitera
DISTRIBUIDOR    Distribuciones SA

REFERENCIA      2036
NOMBRE          Cocina Mediterr√°nea
PVP             9
DESCRIPCI√ìN     Recetas sanas y buenas
ISBN            0-123456-78-9
AUTOR           Do√±a Juana
Luego en los ejercicios os mostrar√© como podemos sobreescribir el constructor de una forma eficiente 
para inicializar campos extra, por ahora veamos como trabajar con estos objetos de distintas clases 
de forma com√∫n.
Trabajando en conjunto
Gracias a la flexibilidad de Python podemos manejar objetos de distintas clases masivamente de una 
forma muy simple.
Vamos a empezar creando una lista con nuestros tres productos de subclases distintas:'''
productos = [adorno, alimento]
productos.append(libro)

print(productos)
##[<__main__.Adorno at 0x14c58660940>,
# <__main__.Alimento at 0x14c586608d0>,
# <__main__.Libro at 0x14c58660978>]
'''Ahora si queremos recorrer todos los productos de la lista podemos usar un bucle for:'''
for producto in productos:
    print(producto, "\n")
'''REFERENCIA      2034
NOMBRE          Vaso adornado
PVP             15
DESCRIPCI√ìN     Vaso de porcelana

REFERENCIA      2035
NOMBRE          Botella de Aceite de Oliva
PVP             5
DESCRIPCI√ìN     250 ML
PRODUCTOR       La Aceitera
DISTRIBUIDOR    Distribuciones SA

REFERENCIA      2036
NOMBRE          Cocina Mediterr√°nea
PVP             9
DESCRIPCI√ìN     Recetas sanas y buenas
ISBN            0-123456-78-9
AUTOR           Do√±a Juana
Tambi√©n podemos acceder a los atributos, siempre que sean compartidos entre todos los objetos:'''
for producto in productos:
    print(producto.referencia, producto.nombre)
'''2034 Vaso adornado
2035 Botella de Aceite de Oliva Extra
2036 Cocina Mediterr√°nea
Si un objeto no tiene el atributo al que queremos acceder nos dar√° error:'''
for producto in productos:
    pass
    # print(producto.autor)
'''
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-8-36e9baf5c1cc> in <module>()
    1 for producto in productos:
----> 2     print(producto.autor)

AttributeError: 'Adorno' object has no attribute 'autor'
Por suerte podemos hacer una comprobaci√≥n con la funci√≥n isinstance() para determinar si una instancia 
es de una determinado clase y as√≠ mostrar unos atributos u otros:'''

for producto in productos:
    if (isinstance(producto, Adorno)):
        print(producto.referencia, producto.nombre)
    elif (isinstance(producto, Alimento)):
        print(producto.referencia, producto.nombre, producto.productor)
    elif (isinstance(producto, Libro)):
        print(producto.referencia, producto.nombre, 'p.isbn')

'''
2034 Vaso adornado
2035 Botella de Aceite de Oliva La Aceitera
2036 Cocina Mediterr√°nea 0-123456-78-9
Polimorfismo
El polimorfismo es una propiedad de la herencia por la que objetos de distintas subclases pueden 
responder a una misma acci√≥n.
La polimorfia es impl√≠cita en Python, ya que todas las clases son subclases de una superclase com√∫n llamada Object. 
Por ejemplo la siguiente funci√≥n aplica una rebaja al precio de un producto:'''


def rebajar_producto(producto, rebaja):
    producto.pvp = producto.pvp - (producto.pvp / 100 * rebaja)


'''Gracias al polimorfismo no tenemos que comprobar si un objeto tiene o no el atributo pvp, 
simplemente intentamos acceder y si existe premio:'''

print(alimento, "\n")
rebajar_producto(alimento, 10)
print(alimento)

'''
REFERENCIA      2035
NOMBRE          Botella de Aceite de Oliva
PVP             5
DESCRIPCI√ìN     250 ML
PRODUCTOR       La Aceitera
DISTRIBUIDOR    Distribuciones SA

REFERENCIA      2035
NOMBRE          Botella de Aceite de Oliva
PVP             4.5
DESCRIPCI√ìN     250 ML
PRODUCTOR       La Aceitera
DISTRIBUIDOR    Distribuciones SA
Por cierto, como pod√©is ver en el ejemplo, cuando modificamos un atributo de un objeto dentro de una 
funci√≥n √©ste cambia en la instancia. Esto es por aquello que os coment√© del paso por valor y referencia.
________________________________________
√öltima edici√≥n: 29 de Septiembre de 2018

Anterior Introducci√≥n 

Siguiente Copia de objetos 


Copia de objetos
De la misma forma que las colecciones, los objetos se pasan a las funciones por referencia. Si modificamos 
sus valores dentro, √©stos se ver√°n reflejados fuera.
Esto tambi√©n afecta a la hora de hacer copias, cre√°ndose en su lugar un acceso al objeto en lugar de uno 
nuevo con sus valores:'''


class Test:
    pass


test1 = Test()
test2 = test1

test1.algo = "Prueba"

print(test2 == test1)  # ¬øSon el mismo objeto?

try:
    print(test2.algo)
except Exception as e:
    print(e)
# True
'''
Prueba
Para realizar una copia a partir de sus valores podemos utilizar la funci√≥n copy del m√≥dulo con el mismo nombre:'''

from copy import copy


class Test:
    pass


test1 = Test()
test2 = copy(test1)

test1.algo = "Prueba"

print(test2 == test1)  # ¬øSon el mismo objeto?

try:
    print(test2.algo)
except Exception as e:
    print(e)
# False
# 'Test' object has no attribute 'algo'
'''
La funci√≥n copy se puede utilizar tambi√©n para copiar colecciones:'''

from copy import copy

lista1 = [1, 2, 3]
lista2 = copy(lista1)
lista1 = None

print(lista1)
print(lista2)
# None
# [1, 2, 3]

'''
Herencia m√∫ltiple
Finalmente hablemos de la herencia m√∫ltiple: la capacidad de una subclase de heredar de m√∫ltiples superclases. 
Esto conlleva un problema, y es que si varias superclases tienen los mismos atributos o m√©todos, la subclase 
s√≥lo podr√° heredar de una de ellas.
En estos casos Python dar√° prioridad a las clases m√°s a la izquierda en el momento de la declaraci√≥n de la subclase:'''


class A:
    def __init__(self):
        print("Soy de clase A")

    def a(self):
        print("Este m√©todo lo heredo de A")


class B:
    def __init__(self):
        print("Soy de clase B")

    def b(self):
        print("Este m√©todo lo heredo de B")


class C(B, A):
    def c(self):
        print("Este m√©todo es de C")


c = C()
c.a()
c.b()
c.c()
# Soy de clase B
# Este m√©todo lo heredo de A
# Este m√©todo lo heredo de B
# Este m√©todo es de C


'''
Ejercicios ¬´ Herencia en la POO
Teor√≠a previa
En este ejercicio vas a trabajar el concepto de herencia un poco m√°s en profundidad, aprovechando para 
introducir un nuevo concepto muy importante que te facilitar√° la vida.
Hasta ahora sabemos que una clase heredada puede f√°cilmente extender algunas funcionalidades, simplemente 
a√±adiendo nuevos atributos y m√©todos, o sobreescribiendo los ya existentes. Como en el siguiente ejemplo:'''


class Vehiculo():

    def __init__(self, color, ruedas):
        self.color = color
        self.ruedas = ruedas

    def __str__(self):
        return "Color {}, {} ruedas".format(self.color, self.ruedas)


class Coche(Vehiculo):

    def __init__(self, color, ruedas, velocidad, cilindrada):
        self.color = color
        self.ruedas = ruedas
        self.velocidad = velocidad
        self.cilindrada = cilindrada

    def __str__(self):
        return "color {}, {} km/h, {} ruedas, {} cc".format(self.color, self.velocidad, self.ruedas, self.cilindrada)


coche = Coche("azul", 150, 4, 1200)
print(coche)
# Color azul, 4 km/h, 150 ruedas, 1200 cc
'''
El inconveniente m√°s evidente de ir sobreescribiendo es que tenemos que volver a escribir el c√≥digo de la
 superclase y luego el espec√≠fico de la subclase.
Para evitarnos escribir c√≥digo innecesario, podemos utilizar un truco que consiste en llamar el m√©todo de la 
superclase y luego simplemente escribir el c√≥digo de la clase:'''


class Vehiculo():

    def __init__(self, color, ruedas):
        self.color = color
        self.ruedas = ruedas

    def __str__(self):
        return "Color {}, {} ruedas".format(self.color, self.ruedas)


class Coche(Vehiculo):

    def __init__(self, color, ruedas, velocidad, cilindrada):
        Vehiculo.__init__(self, color, ruedas)
        self.velocidad = velocidad
        self.cilindrada = cilindrada

    def __str__(self):
        return Vehiculo.__str__(self) + ", {} km/h, {} cc".format(self.velocidad, self.cilindrada)


c = Coche("azul", 4, 150, 1200)
print(c)
# Color azul, 4 ruedas, 150 km/h, 1200 cc
'''
Como tener que determinar constantemente la superclase puede ser fastidioso, Python nos permite utilizar 
un acceso directo mucho m√°s c√≥modo llamado super().
Hacerlo de esta forma adem√°s nos permite llamar c√≥modamente los m√©todos o atributos de la superclase sin 
necesidad de especificar el self, pero ojo, s√≥lo se aconseja utilizarlo cuando tenemos una √∫nica superclase:'''


class Vehiculo():

    def __init__(self, color, ruedas):
        self.color = color
        self.ruedas = ruedas

    def __str__(self):
        return "color {}, {} ruedas".format(self.color, self.ruedas)


class Coche(Vehiculo):

    def __init__(self, color, ruedas, velocidad, cilindrada):
        Vehiculo.__init__(self, color, ruedas)
        self.velocidad = velocidad
        self.cilindrada = cilindrada

    def __str__(self):
        return Vehiculo.__str__(self) + ", {} km/h, {} cc".format(self.velocidad, self.cilindrada)


c = Coche("azul", 4, 150, 1200)
print(c)
# Color azul, 4 km/h, 150 ruedas, 1200 cc
'''
Enunciado
Utilizando esta nueva t√©cnica extiende la clase Vehiculo y realiza la siguiente implementaci√≥n:

‚Ä¢	Crea al menos un objeto de cada subclase y a√±√°delos a una lista llamada vehiculos.
‚Ä¢	Realiza una funci√≥n llamada catalogar() que reciba la lista de vehiculos y los recorra mostrando el nombre de su clase y sus atributos.
‚Ä¢	Modifica la funci√≥n catalogar() para que reciba un argumento optativo ruedas, haciendo que muestre √∫nicamente los que su n√∫mero de ruedas concuerde con el valor del argumento. Tambi√©n debe mostrar un mensaje "Se han encontrado {} veh√≠culos con {} ruedas:" √∫nicamente si se env√≠a el argumento ruedas. Ponla a prueba con 0, 2 y 4 ruedas como valor.
Recordatorio
Puedes utilizar el atributo especial de clase name para recuperar el nombre de la clase de un objeto:
type(objeto).__name__



'''